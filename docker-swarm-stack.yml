networks:
  homelab-shared:
    external: true

configs:
  pihole_custom_dns:
    file: ./pihole/${ENV_NAME}/etc/dnsmasq.d/02-custom-dns.conf
  pihole_config:
    file: ./pihole/${ENV_NAME}/etc/pihole/pihole.toml
  prometheus_config:
    file: ./prometheus/${ENV_NAME}/config/prometheus.yml
  grafana_dashboards:
    file: ./grafana/${ENV_NAME}/config/grafana-dashboards.json

services:
  pihole:
    image: pihole/pihole:${PIHOLE_VERSION}
    environment:
      TZ: 'Europe/London'
      WEBPASSWORD: '${PIHOLE_WEBPASSWORD}'
      FTLCONF_dns_listeningMode: 'all'
      FTLCONF_misc_etc_dnsmasq_d: 'true'
    volumes:
      - ./pihole/${ENV_NAME}/data:/etc/pihole
    configs:
      - source: pihole_custom_dns
        target: /etc/dnsmasq.d/02-custom-dns.conf
        mode: 0644
      - source: pihole_config
        target: /etc/pihole/pihole.toml
        mode: 0644
    ports:
      - "${PIHOLE_DNS_PORT}:53/tcp"
      - "${PIHOLE_DNS_PORT}:53/udp"
    cap_add:
      - NET_ADMIN
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - homelab-shared
    deploy:
      replicas: ${PIHOLE_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pihole-${ENV_NAME}.rule=Host(`pihole.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.pihole-${ENV_NAME}.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == rpi-3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  jellyfin:
    image: jellyfin/jellyfin:${JELLYFIN_VERSION}
    volumes:
      - /tmp/var/${ENV_NAME}/jellyfin/cache:/cache
      - /srv/data/${ENV_NAME}/jellyfin/config:/config
      - /srv/data/${ENV_NAME}/jellyfin/Music:/Music
      - /srv/data/${ENV_NAME}/jellyfin/Movies:/Movies
      - /srv/data/${ENV_NAME}/jellyfin/ChildrensMovies:/ChildrensMovies
    tmpfs:
      - /tmp/jellyfin
    networks:
      - homelab-shared
    deploy:
      replicas: ${JELLYFIN_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jellyfin-${ENV_NAME}.rule=Host(`jellyfin.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.jellyfin-${ENV_NAME}.loadbalancer.server.port=8096"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  hello-world:
    image: nginx:${HELLO_WORLD_VERSION}
    volumes:
      - /srv/data/${ENV_NAME}/hello-world:/usr/share/nginx/html:ro
    networks:
      - homelab-shared
    deploy:
      replicas: ${HELLO_WORLD_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.hello-world-${ENV_NAME}.rule=Host(`hello-world.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.hello-world-${ENV_NAME}.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 32M
        reservations:
          memory: 16M

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.swarm=true"
      - "--providers.swarm.exposedbydefault=false"
      - "--providers.swarm.constraints=Label(`env`,`${ENV_NAME}`)"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab-shared
    deploy:
      replicas: ${TRAEFIK_REPLICAS}
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == ${TRAEFIK_NODE_HARDWARE}
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:${AUDIOBOOKSHELF_VERSION}
    volumes:
      - /srv/data/${ENV_NAME}/audiobookshelf/Audiobooks:/audiobooks
      - /srv/data/${ENV_NAME}/audiobookshelf/config:/config
      - /srv/data/${ENV_NAME}/audiobookshelf/metadata:/metadata
    environment:
      TZ: 'Europe/London'
    networks:
      - homelab-shared
    deploy:
      replicas: ${AUDIOBOOKSHELF_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.audiobookshelf-${ENV_NAME}.rule=Host(`audiobookshelf.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.audiobookshelf-${ENV_NAME}.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  kavita:
    image: jvmilazz0/kavita:${KAVITA_VERSION}
    volumes:
      - /srv/data/${ENV_NAME}/kavita/Books:/books
      - /srv/data/${ENV_NAME}/kavita/config:/kavita/config
    environment:
      TZ: 'Europe/London'
    networks:
      - homelab-shared
    deploy:
      replicas: ${KAVITA_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kavita-${ENV_NAME}.rule=Host(`kavita.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.kavita-${ENV_NAME}.loadbalancer.server.port=5000"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - /srv/data/${ENV_NAME}/prometheus/data:/prometheus
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
        mode: 0644
    networks:
      - homelab-shared
    deploy:
      replicas: ${PROMETHEUS_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus-${ENV_NAME}.rule=Host(`prometheus.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.prometheus-${ENV_NAME}.loadbalancer.server.port=9090"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - /srv/data/${ENV_NAME}/grafana:/var/lib/grafana
    configs:
      - source: grafana_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.json
        mode: 0644
    networks:
      - homelab-shared
    deploy:
      replicas: ${GRAFANA_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana-${ENV_NAME}.rule=Host(`grafana.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.grafana-${ENV_NAME}.loadbalancer.server.port=3000"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - homelab-shared
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - homelab-shared
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  finance_orchestration:
    image: ghcr.io/oscar-barlow/finance-monitoring-orchestration:${FINANCE_ORCHESTRATION_VERSION}
    environment:
      TZ: 'Europe/London'
    volumes:
      - /srv/data/${ENV_NAME}/finance_orchestration:/app/data
    networks:
      - homelab-shared
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.finance-orchestration-${ENV_NAME}.rule=Host(`finance-orchestration.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.finance-orchestration-${ENV_NAME}.loadbalancer.server.port=4200"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  presentation:
    image: ghcr.io/oscar-barlow/finance-monitoring-presentation:${PRESENTATION_VERSION}
    environment:
      TZ: 'Europe/London'
    volumes:
      - /srv/data/${ENV_NAME}/presentation:/app/data
    networks:
      - homelab-shared
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.presentation-${ENV_NAME}.rule=Host(`presentation.${DOMAIN_SUFFIX}`)"
        - "traefik.http.services.presentation-${ENV_NAME}.loadbalancer.server.port=8501"
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.hardware == n100
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M